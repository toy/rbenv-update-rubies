#!/usr/bin/env bash
#
# Usage: rbenv update-rubies
#
# Installs latest versions of rubies
set -e
[ -n "$RBENV_DEBUG" ] && set -x

require_plugin(){
  local name=$1
  local url=$2
  if ! command -v "$name" >/dev/null; then
    echo "$name plugin is required, run following command to install:"
    printf "git clone %q %q\n" "$url" "$RBENV_ROOT/plugins/${name#rbenv-}"
    exit 1
  fi
}

require_plugin ruby-build https://github.com/sstephenson/ruby-build.git
require_plugin rbenv-whatis https://github.com/toy/rbenv-whatis.git

# Provide rbenv completions
if [ "$1" = "--complete" ]; then
  echo system
  exec rbenv-versions --bare
fi

if [ "$1" = "-n" ]; then
  only_check=1
  shift
fi

if [ $# -eq 0 ]; then
  rubies=$(rbenv-versions --bare)
else
  rubies="$*"
fi
installed=()
to_uninstall=()

ruby_version_pattern(){
  local pattern="$1"

  # remove pre version suffix
  if [[ "$pattern" =~ ^(.*)[-.](dev|(pre|preview|rc)[0-9]+)$ ]]; then
    pattern="${BASH_REMATCH[1]}"
  fi

  if [[ "$pattern" =~ ^([^0-9]*[0-9]+(\.[0-9]+){2}-p)[0-9]+([.-][0-9]+)*([^0-9]*)$ ]]; then
    # version with -pNNN
    pattern="${BASH_REMATCH[1]}*${BASH_REMATCH[4]}"
  elif [[ "$pattern" =~ ^([^0-9]*([0-9]+\.){1,2})[0-9]+([.-][0-9]+)*([^0-9]*)$ ]]; then
    # version with at least 2 or 3 parts
    pattern="${BASH_REMATCH[1]}*${BASH_REMATCH[4]}"
  fi

  echo "$pattern"
}

ruby_installed(){
  local ruby
  for ruby in $rubies; do [[ "$ruby" == "$1" ]] && return 0; done
  for ruby in "${installed[@]}"; do [[ "$ruby" == "$1" ]] && return 0; done
  return 1
}

tput() {
  command tput "$@" 2>/dev/null || true
}

longest_common_substring(){
  for i in $(seq ${#1} -1 1); do
    for j in $(seq 0 $((${#1}-i))); do
      match="${1:$j:$i}"
      if [[ "$2" == *"$match"* ]]; then
        echo "$match"
        return
      fi
    done
  done
}

transform_link(){
  local old_link="$1"
  local old_ruby="$2"
  local new_ruby="$3"

  local new_link="${old_link/"$old_ruby"/"$new_ruby"}"
  if [[ "$new_link" != "$old_link" ]]; then
    echo "$new_link"
  else
    local old_common="$(longest_common_substring "$old_link" "$old_ruby")"

    [[ "$old_link" =~ (.*)"$old_common"(.*) ]]
    local link_prefix="${BASH_REMATCH[1]}"
    local link_suffix="${BASH_REMATCH[2]}"

    [[ "$old_ruby" =~ (.*)"$old_common"(.*) ]]
    local ruby_prefix="${BASH_REMATCH[1]}"
    local ruby_suffix="${BASH_REMATCH[2]}"

    with_link_prefix="${new_ruby/#$ruby_prefix/$link_prefix}"
    new_link="${with_link_prefix/%$ruby_suffix/$link_suffix}"
    if [[ "$new_link" == "$new_ruby" ]]; then
      echo "$old_link"
    else
      echo "$new_link"
    fi
  fi
}

BOLD_RED=$(tput setaf 1)$(tput bold)
BOLD_GREEN=$(tput setaf 2)$(tput bold)
BOLD_YELLOW=$(tput setaf 3)$(tput bold)
NORMAL=$(tput sgr0)

for ruby in $rubies; do
  path=$(rbenv-prefix "$ruby")
  pattern=$(ruby_version_pattern "$ruby")
  updated=$(rbenv-whatis "$pattern")

  if [ -L "$path" ]; then
    dest=$(readlink "$path")
    updated=$(rbenv-whatis "$(ruby_version_pattern "$dest")")
    if [[ "$dest" == "$updated" ]]; then
      echo "${BOLD_GREEN}$ruby: symlink to $dest which is already latest${NORMAL}"
    else
      updated_link="$(transform_link "$ruby" "$dest" "$updated")"
      link_path="$(dirname "$path")/$updated_link"

      if [[ "$(readlink "$link_path")" == "$updated" ]]; then
        echo "${BOLD_RED}$ruby: symlink to outdated $dest${NORMAL}"
      elif [ -z "$only_check" ]; then
        echo "${BOLD_YELLOW}$ruby: symlink to outdated $dest, symlinking $updated_link to $updated${NORMAL}"
        ln -nfs "$updated" "$link_path"
      else
        echo "${BOLD_YELLOW}$ruby: symlink to outdated $dest, will symlink $updated_link to $updated${NORMAL}"
      fi
    fi
  elif [[ "$ruby" == "$updated" ]]; then
    echo "${BOLD_GREEN}$ruby ($pattern): already latest${NORMAL}"
  elif ruby_installed "$updated"; then
    echo "${BOLD_RED}$ruby ($pattern): $updated already installed${NORMAL}"
    to_uninstall+=($ruby)
  else
    if [ -z "$only_check" ]; then
      echo "${BOLD_YELLOW}$ruby ($pattern): installing $updated${NORMAL}"
      PREV_VERSION_NAME=$ruby rbenv-install "$updated"
    else
      echo "${BOLD_YELLOW}$ruby ($pattern): will install $updated${NORMAL}"
    fi
    installed+=($updated)
    to_uninstall+=($ruby)
  fi
done

if [ -n "$only_check" ]; then
  if [ ${#installed[@]} -gt 0 ]; then
    exit 1
  else
    exit 0
  fi
fi

for ruby in "${to_uninstall[@]}"; do
  rbenv-uninstall "$ruby" || true
done

for path in "$RBENV_ROOT/versions/"*; do
  if [ -L "$path" ] && [ ! -e "$path" ]; then
    echo "removing symlink $path as $(readlink "$path") doen't exist"
    unlink "$path"
  fi
done

global=$(rbenv-global)
updated=$(rbenv-whatis "$(ruby_version_pattern "$global")")
if [[ "$global" != "$updated" ]]; then
  echo "Updating global $global => $updated"
  rbenv-global "$updated"
fi
